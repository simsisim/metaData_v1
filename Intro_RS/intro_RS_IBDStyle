



It is absolutely possible—and standard practice—to calculate Relative Strength (RS) values and percentile ranks in batch mode for a large list of stocks, rather than processing one by one. Modern data analysis libraries like pandas allow efficient vectorized calculations for thousands of tickers simultaneously.
Batch Calculation Workflow

    Step 1: Calculate returns and RS ratios for all stocks and fractals using pandas DataFrames and vectorized operations.

        All tickers’ prices are organized in a matrix where each column is a stock, making calculations for all at once.

Step 2: Compute percentile ranks:

    pandas’ .rank(pct=True) computes rank percentiles across a DataFrame column for all stocks in one command—no need to loop per ticker.

Step 3: Calculate weighted averages:

    numpy and pandas sum or dot products allow all RS ratings to be combined in one matrix operation, again batched.

Technical Example

python
# Suppose df is a pandas DataFrame of stock price data, columns are tickers
for fractal in fractals:
    stock_returns = df.iloc[-1] / df.iloc[-fractal-1] - 1
    benchmark_return = benchmark_series.iloc[-1] / benchmark_series.iloc[-fractal-1] - 1
    rs_values = (1 + stock_returns) / (1 + benchmark_return)

    # Compute all percentiles at once
    rs_percentiles = rs_values.rank(pct=True)
    rs_ratings = rs_percentiles * 99 + 1  # IBD scaling

This entire process is vectorized; pandas manages the entire universe together, not ticker-by-ticker.
Conclusion

    Yes, batch mode computation is both possible and efficient for RS and percentiles.

    The entire pipeline is optimized for large universes and matrix-style analysis in Python.

    No slow per-ticker loops are needed unless custom conditions demand it.

This enables analysis of thousands of stocks in seconds with scalable, modern data science techniques.

Look at /home/imagda/_invest2024/python/marketScanners_v1/Intro_RS/rs.py
