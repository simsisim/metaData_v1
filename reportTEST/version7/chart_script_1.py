import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Load data from the provided JSON
data = {
    "ticker":["NVDA","MSFT","AAPL","GOOGL","GOOG","AMZN","META","AVGO","TSLA","JPM","WMT","LLY","V","ORCL","MA","NFLX","XOM","JNJ","COST","HD","PLTR","BAC","ABBV","PG","CVX","KO","ASML","GE","TMUS","UNH","CSCO","AMD","PM","AZN","C","PDD","QCOM","GEV","ISRG","ANET","SPGI","ACN","APP","BSX","AMGN","HPQ","LULU","VRSN","NTRS","FE","XLF","XLE","XLK","XLV","XLI","XLB","XLRE","XLP","XLY","XLU","XLC","VGT","SPY","QQQ"],
    "current_price":[174.18,506.69,232.14,212.91,213.53,229.0,738.7,297.39,333.87,301.42,96.98,732.58,351.78,226.13,595.29,1208.25,114.29,177.17,943.32,406.77,156.71,50.74,210.4,157.04,160.6,68.99,742.62,275.2,251.99,309.87,69.09,162.63,167.13,79.9,96.57,120.22,160.73,612.97,473.3,136.55,548.44,259.97,478.59,105.5,287.71,28.54,202.2,273.37,131.28,43.62,53.99,90.39,262.45,137.43,152.01,92.28,42.31,80.78,231.74,84.32,111.39,697.02,645.05,570.4],
    "daily_year_pct_change":[38.71,24.12,2.97,31.37,30.43,34.07,43.43,90.15,62.27,39.27,28.71,-22.21,31.6,65.72,26.9,76.69,1.63,11.58,6.77,11.78,416.17,30.12,11.53,-4.76,14.99,-1.03,-15.77,61.15,26.86,-46.36,42.4,11.12,41.71,-6.59,61.64,34.82,-4.42,233.79,-1.85,60.1,9.32,-21.53,443.85,32.67,-10.49,-14.7,-21.88,51.72,52.62,3.86,22.03,4.01,20.43,-10.28,19.39,1.45,1.0,0.67,26.98,15.26,29.57,23.0,16.98,21.7],
    "daily_rsi_14":[35.75,36.29,60.39,72.45,72.87,61.4,39.23,45.12,46.82,69.9,25.53,83.83,79.3,27.19,74.49,46.93,95.49,67.59,29.7,62.55,24.14,83.58,79.79,56.82,75.15,37.61,57.62,50.0,56.43,81.05,42.39,40.8,44.2,82.07,64.83,61.85,74.44,36.01,51.21,47.71,43.26,79.57,54.17,62.47,53.73,73.86,64.24,59.95,68.08,54.08,75.59,90.39,46.98,75.72,56.41,75.53,66.93,37.4,66.61,36.5,69.74,51.08,61.04,47.47],
    "daily_macd":[2.11,-1.15,4.85,5.53,5.47,1.71,3.75,-1.43,5.94,2.77,-0.51,-4.85,0.98,-1.43,7.74,2.45,1.24,3.42,-4.8,8.63,-0.35,0.98,4.53,0.36,2.49,-0.22,5.24,2.53,3.51,7.74,0.09,1.31,-0.88,2.05,1.6,3.09,1.54,5.27,-7.18,4.69,3.37,-3.83,23.17,0.42,-1.68,0.66,3.61,-1.54,1.55,0.55,0.44,0.9,1.26,1.06,0.66,0.75,0.13,-0.11,3.09,0.19,1.13,5.07,4.99,3.27],
    "atr_pct":[2.84,1.52,1.84,2.07,2.04,2.0,2.27,3.18,3.76,1.56,1.67,2.99,1.47,3.39,1.37,2.22,1.53,1.31,1.54,1.82,4.79,1.59,1.72,1.37,1.58,1.31,2.14,2.08,1.69,3.28,1.76,4.05,2.08,1.53,1.89,3.47,2.06,3.63,2.01,3.27,1.42,2.16,4.73,1.6,1.9,2.43,3.03,1.89,1.79,1.22,0.98,1.43,1.37,1.18,1.04,1.17,1.14,1.02,1.21,1.13,1.01,1.41,0.8,1.1],
    "daily_price_position_52w":[0.9,0.84,0.7,1.0,1.0,0.83,0.83,0.91,0.47,1.0,0.75,0.33,0.97,0.77,0.97,0.81,0.71,0.98,0.36,0.79,0.81,1.0,0.95,0.25,0.88,0.67,0.49,0.96,0.75,0.19,0.81,0.79,0.25,0.75,0.83,0.48,1.0,0.89,0.14,1.0,0.18,0.14,0.93,0.92,0.0,0.38,0.0,0.16,0.10,0.04,0.0,0.0,0.27,0.00,0.07,0.04,0.00,0.19,0.12,0.00,0.00,0.31,0.10,0.21],
    "daily_volume_trend":[-0.06,-0.37,-0.26,0.37,0.13,-0.19,-0.35,0.06,-0.19,-0.06,-0.33,-0.06,0.11,-0.05,-0.20,-0.13,-0.03,-0.25,-0.37,0.08,-0.44,-0.30,0.16,-0.26,0.08,0.10,0.44,-0.09,0.15,-0.45,0.00,0.45,0.29,0.18,0.16,0.45,0.18,-0.19,0.00,0.14,0.44,0.09,0.16,0.32,0.48,-0.33,0.48,0.16,0.49,0.00,0.29,0.15,0.29,0.15,0.32,0.18,0.33,0.05,0.18,0.02,0.46,0.12,0.41,0.29],
    "directional_strength":[0.79,0.39,0.18,0.54,0.52,0.64,0.56,0.72,0.78,0.19,0.72,0.03,0.36,0.76,0.5,0.71,0.47,0.61,0.21,0.27,0.05,0.56,0.77,0.5,0.55,0.45,0.75,0.17,0.69,0.83,0.03,0.63,0.34,0.43,0.09,0.8,0.55,0.74,0.14,0.33,0.36,0.71,0.16,0.17,0.61,0.59,0.48,1.0,0.27,0.49,0.26,0.56,0.74,0.81,0.62,0.16,0.58,0.61,0.71,0.46,0.14,0.76,0.51,0.66],
    "daily_momentum_20":[-0.4,-3.87,7.86,6.5,6.47,4.83,-2.56,-0.17,8.67,2.93,-5.24,2.54,3.96,-7.29,4.25,3.7,6.55,3.76,-2.18,5.8,-10.54,10.35,5.39,2.71,5.04,-1.28,7.92,-0.19,4.12,23.35,-1.27,-3.61,-0.16,8.35,4.61,8.77,8.64,-5.34,-0.56,2.69,-1.81,4.08,14.02,1.53,-1.39,9.5,5.08,0.18,4.24,0.93,3.78,4.98,0.28,4.41,1.19,4.55,1.46,-0.97,5.22,-1.74,3.45,1.06,2.12,1.0]
}

# Create DataFrame
df = pd.DataFrame(data)

# Select the specified columns for correlation analysis
columns = ['current_price', 'daily_year_pct_change', 'daily_rsi_14', 'daily_macd', 
           'atr_pct', 'daily_price_position_52w', 'daily_volume_trend', 
           'directional_strength', 'daily_momentum_20']

correlation_data = df[columns]

# Calculate correlation matrix
corr_matrix = correlation_data.corr()

# Create abbreviated labels (15 character limit)
short_labels = {
    'current_price': 'Price',
    'daily_year_pct_change': 'YTD %',
    'daily_rsi_14': 'RSI 14',
    'daily_macd': 'MACD',
    'atr_pct': 'ATR %',
    'daily_price_position_52w': '52W Pos',
    'daily_volume_trend': 'Vol Trend',
    'directional_strength': 'Dir Strength', 
    'daily_momentum_20': 'Mom 20'
}

# Apply short labels to correlation matrix
corr_matrix.index = [short_labels[col] for col in corr_matrix.index]
corr_matrix.columns = [short_labels[col] for col in corr_matrix.columns]

# Create heatmap with correlation values as text
fig = go.Figure(data=go.Heatmap(
    z=corr_matrix.values,
    x=corr_matrix.columns,
    y=corr_matrix.index,
    colorscale=[[0, '#DB4545'], [0.5, 'white'], [1, '#1FB8CD']],
    zmin=-1,
    zmax=1,
    text=np.round(corr_matrix.values, 2),
    texttemplate="%{text}",
    textfont={"size": 12, "color": "black"},
    hoverongaps=False,
    showscale=True,
    colorbar=dict(title="Correlation")
))

fig.update_layout(
    title="Financial Metrics Correlation"
)

# Save the chart
fig.write_image("correlation_heatmap.png")